#version 330 core

in vec3 position;
in vec3 normal;
in vec2 tex_coords;

out vec3 v_normal;
out vec3 v_position;
out vec2 v_tex_coords;
out float t;

uniform mat4 perspective;

uniform mat4 view;
uniform mat4 model;
uniform vec3 mouse_ray;
uniform vec3 camera_position;
uniform vec2 mouse_position;
uniform vec2 target_dimensions;

void main() {
    v_tex_coords = tex_coords;
    mat4 modelview = view * model;
    v_normal = transpose(inverse(mat3(modelview))) * normal;
    gl_Position = perspective * modelview * vec4(position, 1.0);
    v_position = gl_Position.xyz / gl_Position.w;

    //float x = (2.0 * mouse_position.x) / target_dimensions.x - 1.0;
    //float y = 1.0 - (2.0 * mouse_position.y) / target_dimensions.y;
    //float z = 1.0;
    //vec3 ray_nds = vec3(x, y, z);
//
    //vec4 ray_clip = vec4(ray_nds.xy, -1.0, 1.0);
//
    //vec4 ray_eye = inverse(perspective) * ray_clip;
//
    //ray_eye = vec4(ray_eye.xy, -1.0, 0.0);
//
    //vec3 ray_wor = (inverse(view) * ray_eye).xyz;
    //ray_wor = normalize(ray_wor);

    t = -1 * ((dot(camera_position, normal)) / dot(mouse_ray, normal));

    //t = -1 * (dot(ray_wor, normalize(v_normal)) / dot(camera_position, normalize(v_normal)));
    //t = -1 * (dot(ray_wor, (camera_position * v_normal) / (ray_wor * v_normal)));

}